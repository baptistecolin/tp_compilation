import java_cup.runtime.*;
import java.util.*;
import java.io.*;

parser code {:
  public static void main(String args[]) throws Exception {
    new Parser(new Lexer(new InputStreamReader(System.in))).parse();
  }
:}

action code {:
  // attributes & methods seen from actions

  String make_inst(String lab, String op, String arg) {
    return lab + "\t" + op + "\t" + arg + "\n";
  }

  String make_comm(String comment) {
    return ";/ " + comment + "\n";
  }
:}

terminal TK_SEP, TK_PRINT, TK_ASSIGN, TK_DECLARE;
terminal TK_PLUS, TK_MINUS;
terminal TK_MULT, TK_DIV;
terminal TK_BRALEF, TK_BRARIG;
terminal TK_IF, TK_THEN, TK_ELSE, TK_END, TK_WHILE;
terminal Integer TK_ICNST, TK_INPUT;
terminal String TK_VAR;

non terminal target;
non terminal String program, linst, inst, print, assign, declaration, expr;

precedence left TK_SEP, TK_PRINT;
precedence left TK_PLUS, TK_MINUS;
precedence left TK_MULT, TK_DIV;
precedence left TK_BRALEF;
precedence right TK_BRARIG;

start with target;

target ::= program:s {: System.out.println(s); :}
  ;

program ::= linst:l {: RESULT = l + "\tSTOP\n"; :}
  ;

linst ::= inst:i {: RESULT = i; :}
  | linst:l inst:i {: RESULT = l + i; :}
  ;

inst  ::= print:i TK_SEP {: RESULT = i; :}
	| TK_SEP {: RESULT = ""; :}
  | declaration:i {: RESULT = i; :}
  | assign:i {: RESULT = i; :}
  | TK_IF expr:e1 TK_THEN linst:l1 TK_ELSE linst:l2 TK_END
    {:
      RESULT = e1
              + "\tBEZ\t labelse\n"
              + l1
              +"\tPUSH labfin\n"
              +"\tGOTO\n"
              +"labelse\t EQU * \n"
              + l2
              +"labfin\t EQU *\n";
    :}
  | TK_WHILE expr:e1 TK_THEN linst:l1 TK_END
    {:
      RESULT = "labbefore\t EQU *\n"
              + e1
              +"\tBEZ\t labout\n"
              + l1
              +"\tPUSH\t labbefore\n"
              +"\tGOTO\n"
              +"labout\t EQU *\n";
    :}
	;

print ::= TK_PRINT expr:e
  {:
	   String comment = make_comm("print...");
	   RESULT = comment + e + "\tOUT\n";
	:}
	;

declaration ::= TK_VAR:x TK_DECLARE TK_ICNST:i
  {:
    RESULT = x + "\tDS\t" + i + "\n";
  :}
  ;

assign ::= TK_VAR:x TK_ASSIGN expr:e1
  {:
    String comment = make_comm("assigning...");
    RESULT = comment
            +"\tPUSH\t" + x + "\n"
            + e1
            +"\tSTORE\t\n";
  :}
  | TK_VAR:x TK_INPUT
  {:
    String comment = make_comm("assigning by input...");
    RESULT = comment
            +"\tPUSH\t" + x + "\n"
            +"\tIN\t\n"
            +"\tSTORE\t\n";
  :}
  ;

expr ::= TK_ICNST:i {: RESULT = "\tPUSH\t" + i + "\n"; :}
  | TK_VAR:x
    {:
      RESULT = "\tPUSH\t" + x + "\n"
              +"\tLOAD\t\n";
    :}
  | expr:e1 TK_PLUS expr:e2 
    {: 
      RESULT = e1 + e2 + "\tADD\t\n";
    :}
  | expr:e1 TK_MINUS expr:e2
    {:
      RESULT = e1 + e2 + "\tSUB\t\n";
    :}
  | expr:e1 TK_MULT expr:e2
    {:
      RESULT = e1 + e2 + "\tMUL\t\n";
    :}
  | expr:e1 TK_DIV expr:e2
    {:
      RESULT = e1 + e2 + "\tDIV\t\n";
    :}
  | TK_BRALEF expr:e1 TK_BRARIG
    {:
      RESULT = e1;
    :}
  ;
