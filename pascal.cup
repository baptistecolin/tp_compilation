import java_cup.runtime.*;
import java.util.*;
import java.io.*;

parser code {:
  public static void main(String args[]) throws Exception {
    new Parser(new Lexer(new InputStreamReader(System.in))).parse();
  }
:}

action code {:
  // attributes & methods seen from actions
  int labelCount = 0;

  String make_inst(String lab, String op, String arg) {
    return lab + "\t" + op + "\t" + arg + "\n";
  }

  String make_comm(String comment) {
    return ";/ " + comment + "\n";
  }
:}

terminal TK_SEP, TK_PRINT, TK_ASSIGN, TK_DECLARE;
terminal TK_PLUS, TK_MINUS;
terminal TK_MULT, TK_DIV, TK_MODULO;
terminal TK_MOINS, TK_EQ, TK_INF, TK_SUP, TK_SUPEQ, TK_INFEQ;
terminal TK_BRALEF, TK_BRARIG, TK_CROCHOP, TK_CROCHCL;
terminal TK_IF, TK_THEN, TK_ELSE, TK_END, TK_WHILE;
terminal Integer TK_ICNST, TK_INPUT;
terminal String TK_VAR;

non terminal target;
non terminal String program, linst, inst, print, assign, declaration, expr;

precedence left TK_SEP, TK_PRINT;
precedence left TK_PLUS, TK_MINUS;
precedence left TK_MULT, TK_DIV, TK_MODULO;
precedence left TK_MOINS, TK_EQ, TK_INF, TK_SUP, TK_SUPEQ, TK_INFEQ;
precedence left TK_BRALEF, TK_CROCHOP;
precedence right TK_BRARIG, TK_CROCHCL;

start with target;

target ::= program:s {: System.out.println(s); :}
  ;

program ::= linst:l {: RESULT = l + "\tSTOP\n"; :}
  ;

linst ::= inst:i {: RESULT = i; :}
  | linst:l inst:i {: RESULT = l + i; :}
  ;

inst  ::= print:i TK_SEP {: RESULT = i; :}
	| TK_SEP {: RESULT = ""; :}
  | declaration:i {: RESULT = i; :}
  | assign:i {: RESULT = i; :}
  | TK_IF expr:e1 TK_THEN linst:l1 TK_ELSE linst:l2 TK_END
    {:
      RESULT = e1
              +make_inst("","BEZ","labelse")
              +l1
              +make_inst("","PUSH","labfin")
              +make_inst("","GOTO","")
              +make_inst("labelse","EQU","*")
              +l2
              +make_inst("labfin","EQU","*");
    :}
  | TK_WHILE expr:e1 TK_THEN linst:l1 TK_END
    {:
      RESULT = make_inst("labbefore","EQU","*")
              + e1
              +make_inst("","BEZ","labout")
              + l1
              +make_inst("","PUSH","labbefore")
              +make_inst("","GOTO","")
              +make_inst("labout","EQU","*");
    :}
	;

print ::= TK_PRINT expr:e
  {:
	   String comment = make_comm("print...");
	   RESULT = comment + e + "\tOUT\n";
	:}
	;

declaration ::= TK_VAR:x TK_DECLARE TK_ICNST:i
  {:
    RESULT = x + "\tDS\t" + i + "\n";
  :}
  ;

assign ::= TK_VAR:x TK_ASSIGN expr:e1
  {:
    String comment = make_comm("assigning...");
    RESULT = comment
            +make_inst("","PUSH",x)
            + e1
            +make_inst("","STORE","");
  :}
  | TK_VAR:x TK_INPUT
  {:
    String comment = make_comm("assigning by input...");
    RESULT = comment
            +make_inst("","PUSH",x)
            +make_inst("","IN","")
            +make_inst("","STORE","");
  :}
  | TK_VAR:x TK_CROCHOP expr:e1 TK_CROCHCL TK_ASSIGN expr:e2
    {:
      String comment = make_comm("assigning to an array...");
      RESULT = comment
              +make_inst("","PUSH",x)
              + e1
              +make_inst("","ADD","")
              + e2
              +make_inst("","STORE","");
    :}
  ;

expr ::= TK_ICNST:i {: RESULT = "\tPUSH\t" + i + "\n"; :}
  | TK_VAR:x
    {:
      RESULT = make_inst("","PUSH",x)
              +make_inst("","LOAD","");
    :}
  | TK_VAR:x TK_CROCHOP expr:e TK_CROCHCL
    {:
      RESULT = make_inst("","PUSH",x)
              + e
              +make_inst("","ADD","")
              +make_inst("","LOAD","");
    :}
  | expr:e1 TK_PLUS expr:e2 
    {: 
      RESULT = e1 + e2 + make_inst("","ADD","");
    :}
  | expr:e1 TK_MINUS expr:e2
    {:
      RESULT = e1 + e2 + make_inst("","SUB","");
    :}
  | expr:e1 TK_MULT expr:e2
    {:
      RESULT = e1 + e2 + make_inst("","MUL","");
    :}
  | expr:e1 TK_DIV expr:e2
    {:
      RESULT = e1 + e2 + make_inst("","DIV","");
    :}
  | TK_BRALEF expr:e1 TK_BRARIG
    {:
      RESULT = e1;
    :}
  | TK_MOINS expr:e
    {:
      RESULT = make_inst("","PUSH","0")
              + e
              +make_inst("","SUB","");
    :}
  | expr:e1 TK_MODULO expr:e2
    {:
      // a%b = a - (a/b)*b
      RESULT = e1 + e2 + e1 + e2
              +make_inst("","DIV","")
              +make_inst("","MUL","")
              +make_inst("","SUB","");
    :}
  | expr:e1 TK_EQ expr:e2
    {:
      String nonzero = new String("nonzero" + labelCount);
      String labfin = new String("labfin" + labelCount);
      labelCount++;

      RESULT = e1
              +e2
              +make_inst("","SUB","")
              +make_inst("","BEZ",nonzero)
              +make_inst("","PUSH","0")
              +make_inst("","PUSH",labfin)
              +make_inst("","GOTO","")
              +make_inst(nonzero,"EQU","*")
              +make_inst("","PUSH","1")
              +make_inst(labfin,"EQU","*");
    :}
  | expr:e1 TK_INF expr:e2
    {:
      String greaterThanZero = new String("greaterThanZero" + labelCount);
      String labFin = new String("labfin" + labelCount);
      labelCount++;

      RESULT = e2
              +e1
              +make_inst("","SUB","")
              +make_inst("","BGZ",greaterThanZero)
              +make_inst("","PUSH","0")
              +make_inst("","PUSH",labFin)
              +make_inst("","GOTO","")
              +make_inst(greaterThanZero,"EQU","*")
              +make_inst("","PUSH","1")
              +make_inst(labFin,"EQU","*");
    :}
  | expr:e1 TK_SUP expr:e2
    {:
      String lowerThanZero = new String("lowerThanZero" + labelCount);
      String labFin = new String("labfin" + labelCount);
      labelCount++;

      RESULT = e1
              +e2
              +make_inst("","SUB","")
              +make_inst("","BGZ",lowerThanZero)
              +make_inst("","PUSH","0")
              +make_inst("","PUSH",labFin)
              +make_inst("","GOTO","")
              +make_inst(lowerThanZero,"EQU","*")
              +make_inst("","PUSH","1")
              +make_inst(labFin,"EQU","*");
    :}
  ;
